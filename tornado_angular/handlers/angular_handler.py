#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of tornado_angular.
# https://github.com/heynemann/tornado-angular

# Licensed under the MIT license:
# http://www.opensource.org/licenses/MIT-license
# Copyright (c) 2014 Bernardo Heynemann heynemann@gmail.com


from tornado_angular.handlers import RequestHandler


class AngularIndexHandler(RequestHandler):

    def render_angular(self, **kwargs):
        """Generate the given template with the given arguments.

        We return the generated byte string (in utf8). To generate and
        write a template as a response, use render() above.
        """
        # If no template_path is specified, use the path of the calling file
        template_path = self.application.config.ANGULAR_ROOT
        with RequestHandler._template_loader_lock:
            if template_path not in RequestHandler._template_loaders:
                loader = self.create_template_loader(template_path)
                RequestHandler._template_loaders[template_path] = loader
            else:
                loader = RequestHandler._template_loaders[template_path]
        t = loader.load("app/index.html")
        namespace = self.get_template_namespace()
        namespace.update(kwargs)
        html = t.generate(**namespace)

        self.finish(html)

    def get(self):
        self.render_angular()


class AngularRedirectHandler(AngularIndexHandler):
    def get(self, url):
        if url == "web/":
            super(AngularRedirectHandler, self).get()
            return

        self.redirect("/web/%s" % url.replace('web/', '').lstrip('/'))
